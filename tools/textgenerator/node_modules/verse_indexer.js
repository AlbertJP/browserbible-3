var fs = require('fs'),
	path = require('path'),
	base32 = require('base32');


var 
	removeChars = ['.',',',';','?','!','-','–','―','—','~',':','"',')','(','[',']','/','\\',"'s",'’s',"'",'‘','’','“','”', '¿', '*', '<','>','&','{','}'],
	restrictedWords = ['a', 'and', 'about', 'above', 'across', 'after', 'against', 'along', 'among', 'around', 'at', 'before', 'behind', 'below', 'beneath', 'beside', 'between', 'beyond', 'but', 'by', 'despite', 'down', 'during', 'except', 'for', 'from', 'in', 'inside', 'into', 'like', 'near', 'of', 'off', 'on', 'onto', 'id', 'outside', 'over', 'past', 'since', 'the', 'through', 'throughout', 'till', 'to', 'toward', 'under', 'underneath', 'until', 'up', 'upon', 'with', 'within', 'without'];
	
function indexVerse(indexPath, verseCode, text, indexData) {
	
	// remove punctuation
	for (var i=0, il=removeChars.length; i<il; i++) {
		text = text.replace(removeChars[i], '')	
	}
		
	var words = text.split(' ');
	
	for (var i=0, il=words.length; i<il; i++)  {
		var word = words[i].trim().toLowerCase();
					
		if (word != '' && restrictedWords.indexOf(word) == -1) {
			

		
			var base32word = base32.encode(word),
				wordPath = path.join(indexPath, base32word + '.json'),
				
				// see if we've alreadt started doing this word
				wordData = indexData[base32word];
				
			
			if (base32word.indexOf('undefined') > -1) {
				continue;
			}
			
			// create it
			if (!wordData) {
				wordData = {
					"term": word,
					"occurrences": []
				}
				indexData[base32word] = wordData;	
			}
			
			if (wordData['occurrences'].indexOf(verseCode) == -1) {
				wordData['occurrences'].push(verseCode);				
			}
			
			
		}
	}
	
}


function createIndexFiles(indexPath, indexData) {

	for (var key in indexData) {
		var wordData = indexData[key]	,
			wordPath = path.join(indexPath, key + '.json');
		
		fs.writeFileSync(wordPath, JSON.stringify(wordData));
	}

}

module.exports = {
	createIndexFiles: createIndexFiles,
	indexVerse: indexVerse	
	
}