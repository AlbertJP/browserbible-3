var fs = require('fs'),
	path = require('path'),
	bibleData = require('bible_data'),
	readline = require('readline');
	stream = require('stream'),
	verseIndexer = require('verse_indexer');

function generate(inputPath, outputPath, indexOutputPath, info, createIndex) {
	var 
		sourceFilePath = path.join(inputPath, info['filename']),
		breakChar = '\r';
		;
		
	if (!fs.existsSync(sourceFilePath)) {
		console.log('MSSING', sourceFilePath);
		return;	
	}	
	
	
	// SETUP
	var
		validBooks = [],
		validBookNames = [],
		validChapters = [],
		chapterData = [],
		indexData = {},
		currentChapter = null,
		chaperIndex = 0,
		data = fs.readFileSync( sourceFilePath , 'utf8'),
		lines = data.split('\r');
		
	console.log('lines:', lines.length);
		
	// READ TEXT
	for (var i=0, il=lines.length; i<il; i++) {
		var line = lines[i].trim();
		
		var parts = line.split('\t')
		if (line.substring(0,1) == '#' || parts.length <= 3) {		
			continue;
		}			
		
		var unboundCode = parts[0].trim(),
			bookInfo = bibleData.getBookInfoByUnboundCode(unboundCode),
			chapter = parts[1].trim(),
			verse = parts[2].trim(),
			text = '';
			
		if (bookInfo == null) {
			console.log("Can't find: " + unboundCode);
			continue;
			
		}
		
		if (parts.length == 9) {
			text = parts[8].trim();
		} else if (parts.length == 4) {
			text = parts[3].trim();
		}
		
		
		// add text to chapter.json
		dbsCode = bookInfo['dbsCode'];
		bookName = bibleData.getBookName(dbsCode, info['lang'])
		
		if (bookName == null) {
			bookName = bookInfo['name'].split('/')[0];
		}
		
		chapterCode = dbsCode + '' + chapter;
		verseCode = chapterCode + '_' + verse;
		
		
		// add to arrays
		if (validBooks.indexOf(dbsCode) == -1) {
			validBooks.push(dbsCode)
		}
		if (validBookNames.indexOf(bookName) == -1) {
			validBookNames.push(bookName)
		}
		if (validChapters.indexOf(chapterCode) == -1) {
			validChapters.push(chapterCode)
		}				
		
		if (verse == '1') {
			// close final paragraph of last chapter
			if (currentChapter != null) { 
				currentChapter["text"] += "</div>" + breakChar;
			}
		
			// start new chapter
			currentChapter = {"id": chapterCode, "nextid": null, "lastid": null, "text":""};
			chapterData.push(currentChapter)
			
			if (chapter == '1') {
				currentChapter['text'] += '<div class="mt">' + bookName + '</div>' + breakChar;
							
				//if verbose_output:
				//	print info['abbr'] + '::' + book_name
					
			}
			
			currentChapter['text'] += '<span class="chapter-num">' + chapter + "</span>" + breakChar;
			currentChapter['text'] += '<div class="p">' + breakChar;
		}
			
		currentChapter['text'] += '<span class="verse ' + verseCode + '" data-id="' + verseCode + '"><span class="verse-num v-' + verse + '">' + verse + "&nbsp;</span>" + text + " </span>" + breakChar;
		
		if (createIndex) {
			verseIndexer.indexVerse(indexPath, verseCode, text, indexData);
		}
		
	}
	
	
	console.log( 'chapters: ' + chapterData.length);
	//console.log('indexData',indexData.length);
	
	// CREATE CHAPTER FILES
	for (var i=0, il=chapterData.length; i<il; i++) {
		
		// do prev/next
		var thisChapter = chapterData[i],
			prevChapterId = 'null',
			nextChapterId = 'null';	

		if (i > 0) {
			prevChapterId = chapterData[i-1]['id'];
		}
		if (i < il-1) {
			nextChapterId = chapterData[i+1]['id'];
		}
			
		var chapterHtml = '<!-- Generated by John Dyer | ' + (new Date()) + ' -->' + breakChar + 
			'<div class="section chapter ' + thisChapter['id'] + ' ' + info['id'] + ' ' + info['lang'] + '" dir="' + info['dir'] + '" data-id="' + thisChapter['id'] + '" data-nextid="' + nextChapterId + '" data-previd="' + prevChapterId + '" lang="' + info['lang'] + '">' + breakChar +
			thisChapter['text'] + breakChar +
			'</div>';
				
				
		// create file
		var filePath = path.join(outputPath, thisChapter['id'] + '.html');
		
		fs.writeFileSync(filePath, chapterHtml);
	}
	
	
	// CREATE INFO
	delete info.filename;
	
	info.type = 'bible';
	info.divisionNames = validBookNames;
	info.divisions = validBooks;
	info.sections = validChapters;
	
	var infoPath = path.join(outputPath, 'info.json');
	fs.writeFileSync(infoPath, JSON.stringify(info));
	
	// CREATE ABOUT
	
	var 
		aboutPath = path.join(outputPath, 'about.html'),
		aboutHtml = 
			'<h1>' + info['name'] + '</h1>' + 
			'<dl>' + 
				'<dt>Information</dt><dd>Text from from Biola\'s Unbound Bible project</dd>' + 
				'<dt>Source</dt><dd><a href="http://unbound.biola.edu/">http://unbound.biola.edu/</a></dd>' + 
			'</dl>';
	
	fs.writeFileSync(aboutPath, aboutHtml);		
	
	
	// INDEX
	if (createIndex) {
		verseIndexer.createIndexFiles(indexOutputPath, indexData);
	}	
}




module.exports = {
	generate: generate
}