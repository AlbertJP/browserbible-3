var textRegExp = /(\\([a-z0-9]+))\s([^\\]*)(\\([a-z0-9]+)\*+)/g;
// for inline tags

var unparsed = [];

function formatText(text) {

	textRegExp.lastIndex = 0;
	
	text = text.replace(textRegExp, function() {
		
		//console.log('handling', arguments);
		
		var key = arguments[2],
			content = arguments[3];
			
		switch(key) {
			case 'f':
			case 'ft':
			case 'fqa':			
				content = content.trim();
				var firstSpace = content.indexOf(' '),
					noteKey = content.substring(0,firstSpace),
					noteText = content.substring(firstSpace+1); 
							
				return '<span class="note"><span class="key">' + noteKey + '</span><span class="text">' + noteText + '</span></span>';			
			
				break;	
			case 'x':
				content = content.trim();
				var firstSpace = content.indexOf(' '),
					noteKey = content.substring(0,firstSpace),
					noteText = content.substring(firstSpace+1); 
							
				return '<span class="cf"><span class="key">' + noteKey + '</span><span class="text">' + noteText + '</span></span>';			
			
				break;	
			case 'wj':
				return '<span class="wj woj">' + content + '</span>';
			
				break;

			case 'add':
				return '<span class="add">' + content + '</span>';
			
				break;
				
			case 'qs':
				return '</span><div class="qs">' + content + '</div>';
			
				break;				
				
			default:
			
				if (unparsed.indexOf(key) == -1) {
					console.log('unparsed',key);
					unparsed.push(key);
				}
			
				return arguments[0];
		}
		
		
	});
	
	return text;	
}

function plainText(text) {

	textRegExp.lastIndex = 0;
	
	text = text.replace(textRegExp, function() {
		
		//console.log('handling', arguments);
		
		var key = arguments[2],
			content = arguments[3];
			
		switch(key) {
			case 'f':
			case 'ft':
			case 'fqa':			
			case 'x':
				return '';						
				break;	
			case 'wj':
			case 'qs':
				return content;			
				break;								
			default:
				return arguments[0];
		}		
	});
	
	return text;	
}


// for individual lines
var lineRegExp = /(\\([a-z0-9\*]+))?\s?((\d+(\-\d+)?)\s)?(.*)?/;

function parseLine(line) {
	lineRegExp.lastIndex = 0;

	var parts = lineRegExp.exec(line),
		usfmData = null;
		
	if (parts != null) {
		usfmData = {
			key: parts[2] || '',
			number: parts[4] || '',
			text: parts[6] || '' 
		};
	}
		
	return usfmData;
}


module.exports = {
	textRegExp: textRegExp,
	lineRegExp: lineRegExp,
	formatText: formatText,
	plainText: plainText,	
	parseLine: parseLine	
}